Here's the commented version of the code:

```c++
# Copyright 2020 The gRPC Authors

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#     http://www.apache.org/licenses/LICENSE-2.0

# distributed under the License is distributed on an "AS IS" BASIS,

# See the License for the specific language governing permissions and
# limitations under the License.
"""Client of the Python AsyncIO example of customizing authentication mechanism."""

import argparse
import asyncio
import logging

import _credentials
import grpc

# Load protobuf definitions and gRPC services from helloworld.proto
helloworld_pb2, helloworld_pb2_grpc = grpc.protos_and_services(
    "helloworld.proto"
)

# Set up logger for the module
_LOGGER = logging.getLogger(__name__)
_LOGGER.setLevel(logging.INFO)

# Template for server address and header key for authentication
_SERVER_ADDR_TEMPLATE = "localhost:%d"
_SIGNATURE_HEADER_KEY = "x-signature"

class AuthGateway(grpc.AuthMetadataPlugin):
    """Custom authentication plugin that generates a signature from method name."""
    def __call__(
        self,
        context: grpc.AuthMetadataContext,
        callback: grpc.AuthMetadataPluginCallback,
    ) -> None:
        """Implements authentication by passing metadata to a callback.

        The authentication signature is generated by reversing the method name.
        Implementations of this method must not block.

        Args:
          context: An AuthMetadataContext providing information on the RPC that
            the plugin is being called to authenticate.
          callback: An AuthMetadataPluginCallback to be invoked either
            synchronously or asynchronously.
        """
        # Create signature by reversing the method name
        signature = context.method_name[::-1]
        # Invoke callback with the signature in metadata
        callback(((_SIGNATURE_HEADER_KEY, signature),), None)

def create_client_channel(addr: str) -> grpc.aio.Channel:
    """Creates a secure gRPC channel with custom authentication.
    
    Args:
        addr: Server address to connect to.
        
    Returns:
        An authenticated gRPC channel.
    """
    # Create call credentials using our custom AuthGateway
    call_credentials = grpc.metadata_call_credentials(
        AuthGateway(), name="auth gateway"
    )

    # Create SSL channel credentials using root certificate
    channel_credential = grpc.ssl_channel_credentials(
        _credentials.ROOT_CERTIFICATE
    )

    # Combine SSL and call credentials
    composite_credentials = grpc.composite_channel_credentials(
        channel_credential,
        call_credentials,
    )
    # Create and return a secure channel
    channel = grpc.aio.secure_channel(addr, composite_credentials)
    return channel

async def send_rpc(channel: grpc.aio.Channel) -> helloworld_pb2.HelloReply:
    """Sends an RPC to the Greeter service and handles the response.
    
    Args:
        channel: Authenticated channel to use for RPC.
        
    Returns:
        The server response or error if RPC fails.
    """
    # Create client stub
    stub = helloworld_pb2_grpc.GreeterStub(channel)
    # Create request message
    request = helloworld_pb2.HelloRequest(name="you")
    try:
        # Call SayHello method asynchronously
        response = await stub.SayHello(request)
    except grpc.RpcError as rpc_error:
        # Log and return any RPC errors
        _LOGGER.error("Received error: %s", rpc_error)
        return rpc_error
    else:
        # Log and return successful response
        _LOGGER.info("Received message: %s", response)
        return response

async def main() -> None:
    """Main function that parses arguments and runs the RPC client."""
    # Set up argument parser
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--port",
        nargs="?",
        type=int,
        default=50051,
        help="the address of server",
    )
    args = parser.parse_args()

    # Create authenticated channel and send RPC
    channel = create_client_channel(_SERVER_ADDR_TEMPLATE % args.port)
    await send_rpc(channel)
    # Clean up channel
    await channel.close()

if __name__ == "__main__":
    # Configure logging and run main function
    logging.basicConfig(level=logging.INFO)
    asyncio.run(main())
```