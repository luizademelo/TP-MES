<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: src/proto/grpc/testing/control.proto

namespace Grpc\Testing;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

class ClientConfig extends \Google\Protobuf\Internal\Message
{

    private $server_targets;

    protected $client_type = 0;

    protected $security_params = null;

    protected $outstanding_rpcs_per_channel = 0;

    protected $client_channels = 0;

    protected $async_client_threads = 0;

    protected $rpc_type = 0;

    protected $load_params = null;

    protected $payload_config = null;

    protected $histogram_params = null;

    private $core_list;

    protected $core_limit = 0;

    protected $other_client_api = '';

    private $channel_args;

    protected $threads_per_cq = 0;

    protected $messages_per_stream = 0;

    protected $use_coalesce_api = false;

    protected $median_latency_collection_interval_millis = 0;

    protected $client_processes = 0;

    public function __construct($data = NULL) {
        \GPBMetadata\Src\Proto\Grpc\Testing\Control::initOnce();
        parent::__construct($data);
    }

    public function getServerTargets()
    {
        return $this->server_targets;
    }

    public function setServerTargets($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::STRING);
        $this->server_targets = $arr;

        return $this;
    }

    public function getClientType()
    {
        return $this->client_type;
    }

    public function setClientType($var)
    {
        GPBUtil::checkEnum($var, \Grpc\Testing\ClientType::class);
        $this->client_type = $var;

        return $this;
    }

    public function getSecurityParams()
    {
        return $this->security_params;
    }

    public function setSecurityParams($var)
    {
        GPBUtil::checkMessage($var, \Grpc\Testing\SecurityParams::class);
        $this->security_params = $var;

        return $this;
    }

    public function getOutstandingRpcsPerChannel()
    {
        return $this->outstanding_rpcs_per_channel;
    }

    public function setOutstandingRpcsPerChannel($var)
    {
        GPBUtil::checkInt32($var);
        $this->outstanding_rpcs_per_channel = $var;

        return $this;
    }

    public function getClientChannels()
    {
        return $this->client_channels;
    }

    public function setClientChannels($var)
    {
        GPBUtil::checkInt32($var);
        $this->client_channels = $var;

        return $this;
    }

    public function getAsyncClientThreads()
    {
        return $this->async_client_threads;
    }

    public function setAsyncClientThreads($var)
    {
        GPBUtil::checkInt32($var);
        $this->async_client_threads = $var;

        return $this;
    }

    public function getRpcType()
    {
        return $this->rpc_type;
    }

    public function setRpcType($var)
    {
        GPBUtil::checkEnum($var, \Grpc\Testing\RpcType::class);
        $this->rpc_type = $var;

        return $this;
    }

    public function getLoadParams()
    {
        return $this->load_params;
    }

    public function setLoadParams($var)
    {
        GPBUtil::checkMessage($var, \Grpc\Testing\LoadParams::class);
        $this->load_params = $var;

        return $this;
    }

    public function getPayloadConfig()
    {
        return $this->payload_config;
    }

    public function setPayloadConfig($var)
    {
        GPBUtil::checkMessage($var, \Grpc\Testing\PayloadConfig::class);
        $this->payload_config = $var;

        return $this;
    }

    public function getHistogramParams()
    {
        return $this->histogram_params;
    }

    public function setHistogramParams($var)
    {
        GPBUtil::checkMessage($var, \Grpc\Testing\HistogramParams::class);
        $this->histogram_params = $var;

        return $this;
    }

    public function getCoreList()
    {
        return $this->core_list;
    }

    public function setCoreList($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::INT32);
        $this->core_list = $arr;

        return $this;
    }

    public function getCoreLimit()
    {
        return $this->core_limit;
    }

    public function setCoreLimit($var)
    {
        GPBUtil::checkInt32($var);
        $this->core_limit = $var;

        return $this;
    }

    public function getOtherClientApi()
    {
        return $this->other_client_api;
    }

    public function setOtherClientApi($var)
    {
        GPBUtil::checkString($var, True);
        $this->other_client_api = $var;

        return $this;
    }

    public function getChannelArgs()
    {
        return $this->channel_args;
    }

    public function setChannelArgs($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Grpc\Testing\ChannelArg::class);
        $this->channel_args = $arr;

        return $this;
    }

    public function getThreadsPerCq()
    {
        return $this->threads_per_cq;
    }

    public function setThreadsPerCq($var)
    {
        GPBUtil::checkInt32($var);
        $this->threads_per_cq = $var;

        return $this;
    }

    public function getMessagesPerStream()
    {
        return $this->messages_per_stream;
    }

    public function setMessagesPerStream($var)
    {
        GPBUtil::checkInt32($var);
        $this->messages_per_stream = $var;

        return $this;
    }

    public function getUseCoalesceApi()
    {
        return $this->use_coalesce_api;
    }

    public function setUseCoalesceApi($var)
    {
        GPBUtil::checkBool($var);
        $this->use_coalesce_api = $var;

        return $this;
    }

    public function getMedianLatencyCollectionIntervalMillis()
    {
        return $this->median_latency_collection_interval_millis;
    }

    public function setMedianLatencyCollectionIntervalMillis($var)
    {
        GPBUtil::checkInt32($var);
        $this->median_latency_collection_interval_millis = $var;

        return $this;
    }

    public function getClientProcesses()
    {
        return $this->client_processes;
    }

    public function setClientProcesses($var)
    {
        GPBUtil::checkInt32($var);
        $this->client_processes = $var;

        return $this;
    }

}
