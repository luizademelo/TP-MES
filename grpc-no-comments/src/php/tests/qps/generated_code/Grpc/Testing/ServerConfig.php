<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: src/proto/grpc/testing/control.proto

namespace Grpc\Testing;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

class ServerConfig extends \Google\Protobuf\Internal\Message
{

    protected $server_type = 0;

    protected $security_params = null;

    protected $port = 0;

    protected $async_server_threads = 0;

    protected $core_limit = 0;

    protected $payload_config = null;

    private $core_list;

    protected $other_server_api = '';

    protected $threads_per_cq = 0;

    protected $resource_quota_size = 0;

    private $channel_args;

    protected $server_processes = 0;

    public function __construct($data = NULL) {
        \GPBMetadata\Src\Proto\Grpc\Testing\Control::initOnce();
        parent::__construct($data);
    }

    public function getServerType()
    {
        return $this->server_type;
    }

    public function setServerType($var)
    {
        GPBUtil::checkEnum($var, \Grpc\Testing\ServerType::class);
        $this->server_type = $var;

        return $this;
    }

    public function getSecurityParams()
    {
        return $this->security_params;
    }

    public function setSecurityParams($var)
    {
        GPBUtil::checkMessage($var, \Grpc\Testing\SecurityParams::class);
        $this->security_params = $var;

        return $this;
    }

    public function getPort()
    {
        return $this->port;
    }

    public function setPort($var)
    {
        GPBUtil::checkInt32($var);
        $this->port = $var;

        return $this;
    }

    public function getAsyncServerThreads()
    {
        return $this->async_server_threads;
    }

    public function setAsyncServerThreads($var)
    {
        GPBUtil::checkInt32($var);
        $this->async_server_threads = $var;

        return $this;
    }

    public function getCoreLimit()
    {
        return $this->core_limit;
    }

    public function setCoreLimit($var)
    {
        GPBUtil::checkInt32($var);
        $this->core_limit = $var;

        return $this;
    }

    public function getPayloadConfig()
    {
        return $this->payload_config;
    }

    public function setPayloadConfig($var)
    {
        GPBUtil::checkMessage($var, \Grpc\Testing\PayloadConfig::class);
        $this->payload_config = $var;

        return $this;
    }

    public function getCoreList()
    {
        return $this->core_list;
    }

    public function setCoreList($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::INT32);
        $this->core_list = $arr;

        return $this;
    }

    public function getOtherServerApi()
    {
        return $this->other_server_api;
    }

    public function setOtherServerApi($var)
    {
        GPBUtil::checkString($var, True);
        $this->other_server_api = $var;

        return $this;
    }

    public function getThreadsPerCq()
    {
        return $this->threads_per_cq;
    }

    public function setThreadsPerCq($var)
    {
        GPBUtil::checkInt32($var);
        $this->threads_per_cq = $var;

        return $this;
    }

    public function getResourceQuotaSize()
    {
        return $this->resource_quota_size;
    }

    public function setResourceQuotaSize($var)
    {
        GPBUtil::checkInt32($var);
        $this->resource_quota_size = $var;

        return $this;
    }

    public function getChannelArgs()
    {
        return $this->channel_args;
    }

    public function setChannelArgs($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Grpc\Testing\ChannelArg::class);
        $this->channel_args = $arr;

        return $this;
    }

    public function getServerProcesses()
    {
        return $this->server_processes;
    }

    public function setServerProcesses($var)
    {
        GPBUtil::checkInt32($var);
        $this->server_processes = $var;

        return $this;
    }

}
